import { UsersService } from '../../../auth/services/users.service';
import { TeacherEnrollmentEntity } from '../../../domain/enrollment/entities/teacher-enrollment.entity';
import { StudentLPEnrollmentService } from '../../../domain/enrollment/services/student-enrollment.service';
import { StudentLPEnrollmentAssignmentService } from '../../../domain/enrollment/services/student-enrollment-assignment.service';
import { TeacherEnrollmentService } from '../../../domain/enrollment/services/teacher-enrollment.service';
import { TeacherService } from '../../../domain/staff/services/staff.service';
import { SampleEntity } from '../../../domain/students/entities/sample.entity';
import { StudentEntity } from '../../../domain/students/entities/student.entity';
import { SampleService } from '../../../domain/students/services/sample.service';
import { StudentService } from '../../../domain/students/services/student.service';
import { CourseEntity } from '../../../domain/subject/entities/course.entity';
import { CourseAssignmentService } from '../../../domain/subject/services/assignment.service';
import { CourseService } from '../../../domain/subject/services/course.service';
import { TenantEntity } from '../../../domain/tenant/entities/tenant.entity';
import { TenantService } from '../../../domain/tenant/services/tenant.service';
import { AcademicYearEntity } from '../../../domain/track/entities/academic-year.entity';
import { TrackLearningPeriodEntity } from '../../../domain/track/entities/track-learning-period.entity';
import { AcademicYearService } from '../../../domain/track/services/academic-year.service';
import { CanvasAssignmentDto, CanvasCourseDto, CanvasSubmissionDto, CanvasUserDto, ProcessCourseDto, ProcessEnrollmentDto, ProcessErrorDto, ProcessSubmissionDto } from '../dto';
export declare class CanvasProcessorService {
    private readonly tenantService;
    private readonly studentService;
    private readonly academicYearService;
    private readonly userService;
    private readonly teacherService;
    private readonly teacherEnrollmentService;
    private readonly studentLPEnrollmentService;
    private readonly studentLPEnrollmentAssignmentService;
    private readonly sampleService;
    private readonly courseService;
    private readonly courseAssignmentService;
    private readonly logger;
    constructor(tenantService: TenantService, studentService: StudentService, academicYearService: AcademicYearService, userService: UsersService, teacherService: TeacherService, teacherEnrollmentService: TeacherEnrollmentService, studentLPEnrollmentService: StudentLPEnrollmentService, studentLPEnrollmentAssignmentService: StudentLPEnrollmentAssignmentService, sampleService: SampleService, courseService: CourseService, courseAssignmentService: CourseAssignmentService);
    updateCourse(data: ProcessCourseDto): Promise<void>;
    updateAssignment(tenant: TenantEntity, assignment: CanvasAssignmentDto): Promise<import("../../../domain/subject/entities/assignment.entity").AssignmentEntity>;
    updateSubmission(data: ProcessSubmissionDto): Promise<SampleEntity>;
    protected filterAssignmentsWithDueDate(learning_periods: TrackLearningPeriodEntity[], assignments: CanvasAssignmentDto[], course: CanvasCourseDto): [CanvasAssignmentDto[], TrackLearningPeriodEntity[]];
    protected getOrCreateTeachersEnrolemts(teachers: CanvasUserDto[], tenant: TenantEntity, currentAcademicYear: AcademicYearEntity): Promise<TeacherEnrollmentEntity[]>;
    protected createTeacherAndEnrollment(teacher: CanvasUserDto, tenant: TenantEntity, currentAcademicYear: AcademicYearEntity): Promise<TeacherEnrollmentEntity>;
    protected createStudentLPEnrollments(course: CourseEntity, canvasAssignments: CanvasAssignmentDto[], learningPeriods: TrackLearningPeriodEntity[], students: CanvasUserDto[], teacher_school_enrollment: TeacherEnrollmentEntity[], defaultSchool: TenantEntity['schools'][0]): Promise<void>;
    protected getAndCreateStudents(students: CanvasUserDto[], school_id: number): Promise<StudentEntity[]>;
    createStudent(person: CanvasUserDto, school_id: number): StudentEntity;
    updateSample(sample: SampleEntity, submission: CanvasSubmissionDto, assignment: CanvasAssignmentDto, teachers: CanvasUserDto[]): Promise<SampleEntity>;
    findTenantByDomain(domain: string): Promise<{
        tenant: TenantEntity;
        currentAcademicYear: AcademicYearEntity;
    }>;
    logError({ domain, event, error }: ProcessErrorDto): Promise<void>;
    protected isAssignmentValid(assignment: CanvasAssignmentDto): boolean;
    processEnrollmentCreated(data: ProcessEnrollmentDto): Promise<void>;
    handleCourseDeletion(tenant: TenantEntity, course: CanvasCourseDto): Promise<void>;
    checkAssignment(id: string | number): Promise<any>;
}
